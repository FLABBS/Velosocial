import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime
import math

TOKEN = "7544908894:AAFbDrA2u79O6ymTwdbY_UfXAzluDVmpCSk"
DB_PATH = "goactive.db"
RADIUS_KM = 2

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
    CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        username TEXT,
        lat REAL,
        lon REAL,
        is_ready INTEGER DEFAULT 0,
        comment TEXT,
        last_update TIMESTAMP
    )
    ''')
    c.execute('''
    CREATE TABLE IF NOT EXISTS events (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        creator_id INTEGER,
        description TEXT,
        lat REAL,
        lon REAL,
        event_time TIMESTAMP,
        max_participants INTEGER,
        participants TEXT
    )
    ''')
    conn.commit()
    conn.close()

# Haversine distance
def distance(lat1, lon1, lat2, lon2):
    R = 6371
    phi1, phi2 = math.radians(lat1), math.radians(lat2)
    dphi = math.radians(lat2-lat1)
    dlambda = math.radians(lon2-lon1)
    a = math.sin(dphi/2)**2 + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)**2
    return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))

# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
class EventStates(StatesGroup):
    description = State()
    location = State()
    event_time = State()

class JoinEventStates(StatesGroup):
    event_id = State()

class ProfileStates(StatesGroup):
    comment = State()

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –ö–æ–º–∞–Ω–¥—ã

@dp.message(Command("start"))
async def start(msg: types.Message):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (telegram_id, username, last_update) VALUES (?, ?, ?)",
              (msg.from_user.id, msg.from_user.username, datetime.now()))
    conn.commit()
    conn.close()
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ GoActive ‚Äî —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π. "
                     "\n\nüìç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ —Ç–µ–±—è –Ω–∞–π—Ç–∏.")

@dp.message(F.location)
async def location(msg: types.Message):
    lat, lon = msg.location.latitude, msg.location.longitude
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE users SET lat=?, lon=?, last_update=? WHERE telegram_id=?",
              (lat, lon, datetime.now(), msg.from_user.id))
    conn.commit()
    conn.close()
    await msg.answer("–õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –ª—é–¥–µ–π –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Ä—è–¥–æ–º. "
                     "\n–ò—Å–ø–æ–ª—å–∑—É–π /ready —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –≤–∏–¥–∏–º—ã–º –¥–ª—è –ø–æ–∏—Å–∫–∞.")

@dp.message(Command("profile"))
async def profile(msg: types.Message, state: FSMContext):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT comment, is_ready FROM users WHERE telegram_id=?", (msg.from_user.id,))
    res = c.fetchone()
    comment = res[0] if res else ""
    is_ready = "–ì–æ—Ç–æ–≤ —Å–µ–π—á–∞—Å" if res and res[1] else "–ù–µ –≥–æ—Ç–æ–≤"
    await msg.answer(f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n–°—Ç–∞—Ç—É—Å: {is_ready}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '–Ω–µ—Ç'}"
                     "\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–∞–ø–∏—à–∏ /comment")
    conn.close()

@dp.message(Command("comment"))
async def comment_start(msg: types.Message, state: FSMContext):
    await msg.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(ProfileStates.comment)

@dp.message(ProfileStates.comment, F.text)
async def update_comment(msg: types.Message, state: FSMContext):
    comment = msg.text[:200]
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE users SET comment=? WHERE telegram_id=?", (comment, msg.from_user.id))
    conn.commit()
    conn.close()
    await msg.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /profile —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")
    await state.clear()

@dp.message(Command("ready"))
async def ready(msg: types.Message):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE users SET is_ready=1 WHERE telegram_id=?", (msg.from_user.id,))
    conn.commit()
    conn.close()
    await msg.answer("–¢–µ–ø–µ—Ä—å —Ç—ã –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ '–ì–æ—Ç–æ–≤ —Å–µ–π—á–∞—Å' –∏ –ø–æ—è–≤–ª—è–µ—à—å—Å—è –≤ –ø–æ–∏—Å–∫–µ!")

@dp.message(Command("notready"))
async def notready(msg: types.Message):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE users SET is_ready=0 WHERE telegram_id=?", (msg.from_user.id,))
    conn.commit()
    conn.close()
    await msg.answer("–¢—ã –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–∏–º –¥–ª—è –ø–æ–∏—Å–∫–∞.")

@dp.message(Command("find_people"))
async def find_people(msg: types.Message):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT lat, lon FROM users WHERE telegram_id=?", (msg.from_user.id,))
    user_loc = c.fetchone()
    if not user_loc or user_loc[0] is None or user_loc[1] is None:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!")
        conn.close()
        return
    my_lat, my_lon = user_loc
    c.execute("SELECT telegram_id, username, comment, lat, lon FROM users WHERE is_ready=1 AND telegram_id<>?", (msg.from_user.id,))
    users = c.fetchall()
    res = []
    for u in users:
        if u[3] is None or u[4] is None:
            continue
        dist = distance(my_lat, my_lon, u[3], u[4])
        if dist <= RADIUS_KM:
            res.append(f"@{u[1] or u[0]} ‚Äî {u[2] or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'} ({dist:.1f} –∫–º)")
    await msg.answer("–õ—é–¥–∏ —Ä—è–¥–æ–º:\n\n" + ("\n".join(res) if res else "–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏."))
    conn.close()

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å FSM
@dp.message(Command("create_event"))
async def create_event(msg: types.Message, state: FSMContext):
    await msg.answer("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(EventStates.description)

@dp.message(EventStates.description, F.text)
async def event_desc(msg: types.Message, state: FSMContext):
    await state.update_data(description=msg.text[:100])
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É):")
    await state.set_state(EventStates.location)

@dp.message(EventStates.location, F.location)
async def event_location(msg: types.Message, state: FSMContext):
    await state.update_data(lat=msg.location.latitude, lon=msg.location.longitude)
    await msg.answer("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
    await state.set_state(EventStates.event_time)

@dp.message(EventStates.event_time, F.text)
async def event_time(msg: types.Message, state: FSMContext):
    try:
        dt = datetime.strptime(msg.text, "%d.%m.%Y %H:%M")
    except Exception:
        await msg.answer("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π! –ü—Ä–∏–º–µ—Ä: 31.05.2025 19:00")
        return
    data = await state.get_data()
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''INSERT INTO events
        (creator_id, description, lat, lon, event_time, max_participants, participants)
        VALUES (?, ?, ?, ?, ?, ?, ?)''',
        (msg.from_user.id, data['description'], data['lat'], data['lon'], dt, 20, str(msg.from_user.id))
    )
    conn.commit()
    conn.close()
    await msg.answer("–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–Ω–æ –≤–∏–¥–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä—è–¥–æ–º.")
    await state.clear()

@dp.message(Command("events"))
async def events(msg: types.Message):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT lat, lon FROM users WHERE telegram_id=?", (msg.from_user.id,))
    user_loc = c.fetchone()
    if not user_loc or user_loc[0] is None or user_loc[1] is None:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!")
        conn.close()
        return
    my_lat, my_lon = user_loc
    now = datetime.now()
    c.execute("SELECT id, description, lat, lon, event_time FROM events WHERE event_time>?",(now,))
    events = c.fetchall()
    res = []
    for e in events:
        if e[2] is None or e[3] is None:
            continue
        dist = distance(my_lat, my_lon, e[2], e[3])
        try:
            dt_str = datetime.strptime(e[4], "%Y-%m-%d %H:%M:%S")
        except Exception:
            dt_str = e[4]
        if dist <= RADIUS_KM:
            res.append(f"ID: {e[0]}\n{e[1]}\n–ö–æ–≥–¥–∞: {dt_str if isinstance(dt_str, str) else dt_str.strftime('%d.%m.%Y %H:%M')}\n–ì–¥–µ: {dist:.1f} –∫–º –æ—Ç —Ç–µ–±—è")
    await msg.answer("–°–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º:\n\n" + ("\n\n".join(res) if res else "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π —Ä—è–¥–æ–º."))
    conn.close()

@dp.message(Command("join_event"))
async def join_event(msg: types.Message, state: FSMContext):
    await msg.answer("–ù–∞–ø–∏—à–∏ ID —Å–æ–±—ã—Ç–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:")
    await state.set_state(JoinEventStates.event_id)

@dp.message(JoinEventStates.event_id, F.text)
async def handle_join(msg: types.Message, state: FSMContext):
    try:
        event_id = int(msg.text)
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT participants FROM events WHERE id=?", (event_id,))
        row = c.fetchone()
        if not row:
            await msg.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            conn.close()
            await state.clear()
            return
        participants = row[0].split(",") if row[0] else []
        if str(msg.from_user.id) not in participants:
            participants.append(str(msg.from_user.id))
            c.execute("UPDATE events SET participants=? WHERE id=?", (",".join(participants), event_id))
            conn.commit()
        conn.close()
        await msg.answer("–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–æ–±—ã—Ç–∏—é!")
    except Exception:
        await msg.answer("–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å ID —Å–æ–±—ã—Ç–∏—è.")
    finally:
        await state.clear()

# --- –ó–∞–ø—É—Å–∫

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
